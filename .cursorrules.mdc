# RÈGLES BOOMBOXSWAP - CURSOR

## RÈGLE ANTI-EMOJI STRICTE
- AUCUN emoji dans le code, les commentaires, les logs, ou l'interface
- Utiliser des tokens textuels: 'OK', 'ECHEC', 'ATTENTION', 'SUCCES', 'ERREUR'
- Remplacer tous les emojis par du texte professionnel
- Vérifier tous les fichiers Python avec le script check_no_emoji.py

## STANDARDS DE DÉVELOPPEMENT
- Langue: Français pour tous les commentaires et messages
- Style: Code professionnel et lisible
- Documentation: Toujours en français
- Nommage: Variables et fonctions en français quand approprié

## ARCHITECTURE
- Backend: FastAPI avec Web3.py
- Frontend: HTML/CSS/JavaScript vanilla
- Cache: Mémoire local
- Environnement: Conda obligatoire
- Tests: pytest avec couverture

## SÉCURITÉ
- Aucune clé privée stockée
- Validation stricte des entrées
- Protection contre les attaques reentrancy
- Gestion d'erreurs robuste

## PERFORMANCE
- Connection pooling Web3
- Cache mémoire optimisé
- Multicall batching
- Fallback RPC automatique

## WORKFLOW DÉVELOPPEMENT OBLIGATOIRE

### CONSULTATION PRÉALABLE SYSTÉMATIQUE
- TOUJOURS lire ROADMAP.md avant chaque phase
- TOUJOURS lire CAHIER_DES_CHARGES.md avant développement  
- TOUJOURS consulter TABLEAU_DE_BORD.md pour connaître statut

### SUIVI PROGRESSION OBLIGATOIRE
- CRÉER TABLEAU_DE_BORD.md si inexistant
- METTRE À JOUR tableau de bord après chaque phase
- RESPECTER ordre séquentiel des phases (pas de saut)
- DOCUMENTER progression et prochaines étapes

### VALIDATION PHASE OBLIGATOIRE
- CONFIRMER fin de phase avant passage suivante
- VÉRIFIER toutes tâches cochées [x] dans tableau de bord
- VALIDER respect cahier des charges
- PRÉPARER prochaine phase selon dépendances roadmap

### PATTERNS BOOMBOXSWAP OBLIGATOIRES
- Architecture FastAPI + Web3.py + Cache mémoire respectée
- Gaming UX avec terminologie Mission/Escadron/Base
- Multi-chain BSC/Arbitrum/Base configuré
- Performance multicall + cache mémoire intégré
- Sécurité reentrancy + validation inputs appliquée
description:
globs:
alwaysApply: false
---

## PYTHON FORMATTING RULES (PEP 8 STRICT)
- ALL Python code MUST respect 79 characters per line limit
- Use line continuation with backslash \ for long lines  
- Break long strings using + concatenation
- Format dictionaries and lists on multiple lines when needed
- Always follow PEP 8 standards completely
- NO line should exceed 79 characters in Python files
- Use parentheses for natural line breaking when possible

### PYTHON FORMATTING EXAMPLES

#### Long function calls - CORRECT:
```python
result = some_long_function_name(
    parameter1="value1",
    parameter2="value2", 
    parameter3="value3"
)
```

#### Long strings - CORRECT:
```python
message = "This is a very long message that needs to be " + \
          "split across multiple lines to respect the limit"
```

#### Long dictionaries - CORRECT:
```python
config = {
    "key1": "value1",
    "key2": "value2",
    "key3": "value3"
}
```

#### API endpoints - CORRECT:
```python
@app.get("/api/v1/data/balances/{address}")
async def get_balances(address: str):
    print(f"[API] get_balances called with address: {address}")
    if not is_valid_ethereum_address(address):
        raise HTTPException(
            status_code=422,
            detail="Invalid Ethereum address"
        )
```

#### Long URLs and paths - CORRECT:
```python
api_url = "https://api.pancakeswap.info/api/v2/tokens/" + \
          f"{token_address}"
```
